{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.js","api/index.js","Components/Charts/Charts.js","Components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","App.module.css","Components/Charts/Charts.module.css","Components/CountryPicker/CountryPicker.module.css","Images/image.png"],"names":["module","exports","Cards","Data","confirmed","recovered","deaths","lastUpdate","className","Styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","Infected","CardContent","Typography","color","gutterBottom","varaint","start","end","value","duration","separator","Date","toDateString","Recovered","Deaths","url","FetchData","country","a","ChangeAbleUrl","axios","get","data","FetchDailyData","modifiedData","map","dailydata","total","date","reportDate","FetchCountries","countries","name","Charts","Country","useState","dailyData","setDailyData","useEffect","FetchApi","LineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","BarChart","hoverBackgroundColor","option","legend","display","title","text","CountryPicker","Picker","FetchedCountries","setFetchedCountries","FetchedApi","FormControl","NativeSelect","defaultValue","onChange","event","target","i","key","App","state","handleCountryChange","FetchedData","setState","this","image","src","coronaImage","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe083a52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3gi52\",\"Card\":\"Cards_Card__26_dD\",\"Infected\":\"Cards_Infected__27MVK\",\"Recovered\":\"Cards_Recovered__35Q_h\",\"Deaths\":\"Cards_Deaths__2DirX\"};","import React from 'react'\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport Styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\nconst Cards= ({Data:{confirmed,recovered,deaths,lastUpdate}})=>{\r\n   if(!confirmed)\r\n   {\r\n       return 'loading ............'\r\n   }\r\n\r\n    return (\r\n    <div className={Styles.container}>\r\n        <Grid container spacing ={3} justify='center'>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(Styles.Card,Styles.Infected)}>\r\n            <CardContent>\r\n                <Typography color = 'textSecondary' gutterBottom>Infected</Typography>\r\n                <Typography varaint= 'h5'>\r\n                    <CountUp\r\n                    start =  {0}\r\n                    end={confirmed.value}\r\n                    duration={3}\r\n                    separator=','/>\r\n                </Typography>\r\n    <Typography color = 'textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                <Typography varaint= 'body2'>Number of active cases of COVID-19</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(Styles.Card,Styles.Recovered)}>\r\n            <CardContent>\r\n                <Typography color = 'textSecondary' gutterBottom>Recovered</Typography>\r\n                <Typography varaint= 'h5'><CountUp\r\n                    start =  {0}\r\n                    end={recovered.value}\r\n                    duration={3}\r\n                    separator=','/></Typography>\r\n                <Typography color = 'textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                <Typography varaint= 'body2'>Number of recoveries from COVID-19</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(Styles.Card,Styles.Deaths)}>\r\n            <CardContent>\r\n                <Typography color = 'textSecondary' gutterBottom>Deaths</Typography>\r\n                <Typography varaint= 'h5'><CountUp\r\n                    start =  {0}\r\n                    end={deaths.value}\r\n                    duration={3}\r\n                    separator=','/></Typography>\r\n                <Typography color = 'textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                <Typography varaint= 'body2'>Number of deaths Caused by COVID-19</Typography>\r\n            </CardContent>\r\n        </Grid>\r\n        </Grid>\r\n        \r\n    </div>\r\n    )\r\n\r\n}\r\nexport default Cards","import axios from 'axios'\r\nconst url='https://covid19.mathdro.id/api'\r\nexport const FetchData = async (country) =>{\r\nlet ChangeAbleUrl = url\r\nif(country)\r\n{\r\n   if(country!== 'Global')\r\n   {ChangeAbleUrl =`${url}/countries/${country}`}\r\n}\r\ntry {\r\n   const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios.get(ChangeAbleUrl) \r\n   return { confirmed,recovered,deaths,lastUpdate }\r\n} catch (error) {\r\n    \r\n}\r\n  \r\n}\r\nexport const FetchDailyData = async () =>{\r\n   try {\r\n      const {data} = await axios.get(`${url}/daily`) \r\n    const modifiedData= data.map((dailydata)=>({\r\n       confirmed:dailydata.confirmed.total,\r\n       deaths:dailydata.deaths.total,\r\n       date:dailydata.reportDate\r\n    }))\r\n    return modifiedData\r\n   } catch (error) {\r\n       \r\n   }\r\n     \r\n }\r\n export const FetchCountries = async () =>{\r\n   try {\r\n      const {data:{countries}} = await axios.get(`${url}/countries`) \r\n      return countries.map((country)=>country.name)\r\n   } catch (error) {\r\n       \r\n   }\r\n     \r\n }","import React ,{useState,useEffect}from 'react'\r\nimport {FetchDailyData} from '../../api'\r\nimport {Line,Bar} from 'react-chartjs-2'\r\nimport Styles from './Charts.module.css'\r\nconst Charts= ({Data:{confirmed,recovered,deaths},Country})=>{\r\n    const [dailyData,setDailyData] = useState([])\r\n    useEffect(()=>{\r\n        const FetchApi= async()=>{\r\n            setDailyData(await FetchDailyData())\r\n        }\r\n        FetchApi()\r\n    },[])\r\n   const LineChart = (\r\n       dailyData.length?(\r\n       <Line\r\n       data = {{\r\n           labels:dailyData.map(({date})=>date),\r\n           datasets:[{\r\n               data:dailyData.map(({confirmed})=>confirmed),\r\n               label:'Infected',\r\n               borderColor:'#3333ff',\r\n               fill:true\r\n\r\n           },{ data:dailyData.map(({deaths})=>deaths),\r\n           label:'Deaths',\r\n           borderColor:'red',\r\n           backgroundColor:'rgba(255,0,0,0.5)',\r\n           fill:true\r\n         }]\r\n\r\n       }} \r\n       />):null\r\n   )\r\n   const BarChart = (\r\n       confirmed?(\r\n           <Bar\r\n           data = {{\r\n            labels:['Infected','Recovered','Deaths'],\r\n            datasets:[{\r\n                    label:'People',\r\n                    backgroundColor:[\r\n                        ' rgba(0,0, 255, 0.5)',\r\n                        ' rgba(0,255,0, 0.5)',\r\n                        'rgba(255,0, 0, 0.5)'\r\n                    ],\r\n                    hoverBackgroundColor: [' rgba(0,0, 255, 0.55)',\r\n                    ' rgba(0,255,0, 0.55)',\r\n                    'rgba(255,0, 0, 0.55)'],\r\n                    data:[confirmed.value,recovered.value,deaths.value]\r\n                }]\r\n           }}\r\n           option ={{\r\n               legend :{display:false},\r\n               title :{display:true,text:`Current State In ${Country}`}\r\n           }}\r\n           />\r\n\r\n            \r\n       ):null\r\n   )\r\n    return (\r\n    <div className={Styles.container}>\r\n        {Country?BarChart:LineChart}\r\n     \r\n    </div>\r\n    )\r\n\r\n}\r\nexport default Charts","import React,{useState,useEffect} from 'react'\r\nimport {NativeSelect,FormControl} from '@material-ui/core'\r\nimport Styles from './CountryPicker.module.css'\r\nimport {FetchCountries} from '../../api'\r\nconst CountryPicker= ({Picker})=>{\r\n    const [FetchedCountries,setFetchedCountries]=useState([])\r\n    useEffect((()=>{\r\n        const FetchedApi = async()=>{\r\n            setFetchedCountries(await FetchCountries()) \r\n        }\r\n        FetchedApi()\r\n    }),[setFetchedCountries])\r\n    return (\r\n    <FormControl className={Styles.FormControl}>\r\n        <NativeSelect defaultValue = '' onChange={(event)=>{Picker(event.target.value)}}>\r\n    <option value=''>Global</option>\r\n   {FetchedCountries.length?(FetchedCountries.map((country,i)=><option key ={i} value={country}>{country}</option>)):null}\r\n            </NativeSelect>\r\n    </FormControl>\r\n    )\r\n\r\n}\r\nexport default CountryPicker","import React from 'react';\nimport {Cards,Charts,CountryPicker} from './Components'\nimport {FetchData} from './api/index'\nimport Styles from'./App.module.css';\nimport coronaImage  from './Images/image.png'\n\n\nclass App extends React.Component {\n  state={\n    data:{},\n    country:''\n  }\n  async  componentDidMount(){\n   let FetchedData = await FetchData()\n    this.setState({data:FetchedData})\n   \n  }\n  handleCountryChange= async (countries) => {\n    let FetchedData = await FetchData(countries)\n    this.setState({data:FetchedData,country:countries})\n  }\n  render()\n  {\n    const { data ,country}=this.state\n    return(\n      <div className={Styles.container}>\n        <img className={Styles.image} src={coronaImage} alt=\"COVID-19\"/>\n        <Cards Data={data}/>\n        <CountryPicker Picker={this.handleCountryChange}/> \n        <Charts Data={data} Country={country}/>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2PQ8e\",\"image\":\"App_image__2_Cwn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__3IYhU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormControl\":\"CountryPicker_FormControl__ZAN_e\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}